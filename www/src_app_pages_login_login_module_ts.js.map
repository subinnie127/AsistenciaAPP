{"version":3,"file":"src_app_pages_login_login_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEd;AAEzC,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,kDAAS;KACrB;CACF,CAAC;IAMW,sBAAsB,SAAtB,sBAAsB;CAAG;AAAzB,sBAAsB;IAJlC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBM;AACM;AACF;AAEA;AAEmB;AAEvB;IAW5B,eAAe,SAAf,eAAe;CAAG;AAAlB,eAAe;IAT3B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,yEAAsB;SACvB;QACD,YAAY,EAAE,CAAC,kDAAS,CAAC;KAC1B,CAAC;GACW,eAAe,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;CClB5B;AACA;;CAEA;;AACA;AACA;IAQaI,SAAS,SAATA,SAAS;EAkBpB;;;;;;;EAOAC,YAAoBC,MAApB,EAA4CC,eAA5C,EAA4E;IAAxD;IAAwB;IAC1C,KAAKC,OAAL,GAAe,IAAIL,0DAAJ,CAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,CAAf;IACA,KAAKK,OAAL,CAAaC,MAAb,GAAsB,mBAAtB;IACA,KAAKD,OAAL,CAAaE,QAAb,GAAwB,MAAxB;EACD;;EAEDC,QAAQ,IAEP;;EAEMC,QAAQ;IAEb,IAAG,CAAC,KAAKC,cAAL,CAAoB,KAAKL,OAAzB,CAAJ,EAAuC;MACrC;IACD;;IAED,KAAKM,cAAL,CAAoB,cAApB;IAEA;;;;;;;;;;;IAWA,MAAMC,gBAAgB,GAAqB;MACzCC,KAAK,EAAE;QACLR,OAAO,EAAE,KAAKA;MADT;IADkC,CAA3C,CAnBa,CAwBb;;IACA,KAAKF,MAAL,CAAYW,QAAZ,CAAqB,CAAC,OAAD,CAArB,EAAgCF,gBAAhC;EAED;;EAEDG,QAAQ;IACN,KAAKZ,MAAL,CAAYW,QAAZ,CAAqB,CAAC,WAAD,CAArB;EACC;;EAEIJ,cAAc,CAACL,OAAD,EAAiB;IAEpC,MAAMW,GAAG,GAAG,KAAKX,OAAL,CAAaY,mBAAb,CACV,KAAKZ,OAAL,CAAaC,MADH,EACW,KAAKD,OAAL,CAAaE,QADxB,CAAZ;;IAGA,IAAIS,GAAJ,EAAS;MACP,KAAKX,OAAL,GAAeW,GAAf;MACA,OAAO,IAAP;IACD,CAHD,MAIK;MACH,KAAKL,cAAL,CAAoB,oCAApB;MACA,OAAO,KAAP;IACD;EACF;;EAEKA,cAAc,CAACO,OAAD,EAAkBC,QAAlB,EAAmC;IAAA;;IAAA;MACrD,MAAMC,KAAK,SAAS,KAAI,CAAChB,eAAL,CAAqBiB,MAArB,CAA4B;QAC5CC,OAAO,EAAEJ,OADmC;QAE5CK,QAAQ,EAAEJ,QAAQ,GAAEA,QAAF,GAAY;MAFc,CAA5B,CAApB;MAIAC,KAAK,CAACI,OAAN;IALqD;EAMtD;;EAEDC,mBAAmB;IACjB,KAAKtB,MAAL,CAAYW,QAAZ,CAAqB,CAAC,mBAAD,CAArB;EACD;;AA7FmB;;;QAXbhB,mDAAMA;;QAENC,2DAAeA;;;AASXE,SAAS,sDALrBJ,wDAAS,CAAC;EACT6B,QAAQ,EAAE,WADD;EAETC,UAAAA,wDAFS;;AAAA,CAAD,CAKY,GAAT1B,SAAS,CAAT","sources":["./src/app/pages/login/login-routing.module.ts","./src/app/pages/login/login.module.ts","./src/app/pages/login/login.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","import { Component, OnInit } from '@angular/core';\n// Las clases Router y NavigationExtras son necesarias para que la página login le pase\n// el nombre de usuario a la página home\nimport { Router, NavigationExtras } from '@angular/router';\n// La clase ToastController sirve para mostrar mensajes emergente que duran un par de segundos\nimport { ToastController } from '@ionic/angular';\nimport { Usuario } from 'src/app/model/Usuario';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n  /*\n    Se genera el modelo user con dos claves (key), las que se comportan como propiedades\n    de la clase LoginPage.\n    En Modelo MVC, la clase \"LoginPage\" viene siendo el \"Controlador\", encargado de administrar\n    la parte gráfica de la página web de login, por lo que trabaja coordinado con el\n    archivo login.page.html\n    Cada propiedad tiene su valor inicial y tiene su pareja de control HTML que es el <ion-input>\n    De este modo el TAG:\n    <ion-input type=\"text\" [(ngModel)]=\"login.Usuario\"></ion-input>\n    ya sabe que tiene que trabajar con el modelo de Angular a través de la\n    propiedad \"login.Usuario\".\n    Fijarse que si se le colocan valores iniciales a login.usuario y login.password,\n    estos aparecerán inmediatamente reflejados en la página login cuando esta\n    se abra por primera vez.\n  */\n\n  public usuario: Usuario;\n  /*\n    Para poder trabajar con Router y poder navegar hacia la página \"home\", debemos primero\n    pasar como parámetro e instanciar un objeto de la clase \"Router\". Fijarse que el tipo\n    de dato, que se pasa en el constructor es \"Router\" con mayúscula, porque se trata de\n    una clase y éstas parten con letra mayúscula, mientras que \"router\" con minúscula es\n    el objeto de esa clase, que usaremos para ejecutar el método \"navigate\".\n  */\n  constructor(private router: Router, private toastController: ToastController) {\n    this.usuario = new Usuario('', '', '', '', '');\n    this.usuario.correo = 'atorres@duocuc.cl';\n    this.usuario.password = '1234';\n  }\n\n  ngOnInit() {\n\n  }\n\n  public ingresar(): void {\n\n    if(!this.validarUsuario(this.usuario)) {\n      return;\n    }\n\n    this.mostrarMensaje('¡Bienvenido!');\n\n    /*\n      Se declara e instancia un objeto de la clase NavigationExtras, para poder pasarle\n      parámetros a la página home. Al objeto json \"state\" se le asigna un objeto con\n      nombre de clave \"login\" y el valor \"this.login\", de modo que\n      le pase la cuenta de usuario y su password a la página home.\n\n      Nótese que al enviar this.login, realmente se está enviando los valores que el usuario\n      digitó en las cajas de input, pues gracias a la directiva [(ngModel)]=\"login.usuario\",\n      el programa sabe que hay una relación directa de unión entre el valor de la propiedad\n      login.usuario y el valor del control gráfico que lleva este mismo nombre.\n    */\n    const navigationExtras: NavigationExtras = {\n      state: {\n        usuario: this.usuario\n      }\n    };\n    // Navegamos hacia el Home y enviamos la información extra\n    this.router.navigate(['/home'], navigationExtras);\n    \n  }\n\n  goToHome(){\n    this.router.navigate(['/qrreader'])\n    }\n  \n  public validarUsuario(usuario: Usuario): boolean {\n\n    const usu = this.usuario.buscarUsuarioValido(\n      this.usuario.correo, this.usuario.password);\n\n    if (usu) {\n      this.usuario = usu;\n      return true;\n    }\n    else {\n      this.mostrarMensaje('Las credenciales no son correctas!');\n      return false;\n    }\n  }\n\n  async mostrarMensaje(mensaje: string, duracion?: number) {\n    const toast = await this.toastController.create({\n        message: mensaje,\n        duration: duracion? duracion: 2000\n      });\n    toast.present();\n  }\n  \n  goToRecuperarContra(){\n    this.router.navigate(['/recuperar-contra'])\n  }\n\n}\n"],"names":["Component","Router","ToastController","Usuario","LoginPage","constructor","router","toastController","usuario","correo","password","ngOnInit","ingresar","validarUsuario","mostrarMensaje","navigationExtras","state","navigate","goToHome","usu","buscarUsuarioValido","mensaje","duracion","toast","create","message","duration","present","goToRecuperarContra","selector","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}