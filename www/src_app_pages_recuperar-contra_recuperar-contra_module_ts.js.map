{"version":3,"file":"src_app_pages_recuperar-contra_recuperar-contra_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEO;AAE9D,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,uEAAmB;KAC/B;CACF,CAAC;IAMW,gCAAgC,SAAhC,gCAAgC;CAAG;AAAnC,gCAAgC;IAJ5C,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,gCAAgC,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBJ;AACM;AACF;AAEA;AAEwC;AAEvB;IAWjD,yBAAyB,SAAzB,yBAAyB;CAAG;AAA5B,yBAAyB;IATrC,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,8FAAgC;SACjC;QACD,YAAY,EAAE,CAAC,uEAAmB,CAAC;KACpC,CAAC;GACW,yBAAyB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;CClBtC;AACA;;CAEA;;AACA;AACA;IAOaI,mBAAmB,SAAnBA,mBAAmB;EAkB9B;;;;;;;EAOAC,YAAoBC,MAApB,EAA4CC,eAA5C,EAA4E;IAAxD;IAAwB;IAC1C,KAAKC,OAAL,GAAe,IAAIL,0DAAJ,CAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,CAAf;IACA,KAAKK,OAAL,CAAaC,MAAb,GAAsB,EAAtB;EACD;;EAEMC,QAAQ;IAEb;;;;;;;;;;IAUA;IACA;IACA;EACD;;EAEMC,YAAY;IAEjB,IAAG,CAAC,KAAKC,kBAAL,CAAwB,KAAKJ,OAA7B,CAAJ,EAA2C;MACzC;IACD;;IAED,KAAKK,cAAL,CAAoB,cAApB;IAGA,MAAMC,gBAAgB,GAAqB;MACzCC,KAAK,EAAE;QACLP,OAAO,EAAE,KAAKA;MADT;IADkC,CAA3C,CATiB,CAcjB;;IACA,KAAKF,MAAL,CAAYU,QAAZ,CAAqB,CAAC,WAAD,CAArB,EAAoCF,gBAApC;EACD;EAED;;;;;;EAIOF,kBAAkB,CAACJ,OAAD,EAAiB;IAExC,MAAMS,GAAG,GAAG,KAAKT,OAAL,CAAaU,uBAAb,CACV,KAAKV,OAAL,CAAaC,MADH,CAAZ;;IAGA,IAAIQ,GAAJ,EAAS;MACP,KAAKT,OAAL,GAAeS,GAAf;MACA,OAAO,IAAP;IACD,CAHD,MAIK;MACH,KAAKJ,cAAL,CAAoB,oCAApB;MACA,OAAO,KAAP;IACD;EACF;EAED;;;;;;;;EAMMA,cAAc,CAACM,OAAD,EAAkBC,QAAlB,EAAmC;IAAA;;IAAA;MACrD,MAAMC,KAAK,SAAS,KAAI,CAACd,eAAL,CAAqBe,MAArB,CAA4B;QAC5CC,OAAO,EAAEJ,OADmC;QAE5CK,QAAQ,EAAEJ,QAAQ,GAAEA,QAAF,GAAY;MAFc,CAA5B,CAApB;MAIAC,KAAK,CAACI,OAAN;IALqD;EAMtD;;EACDC,SAAS;IACP,KAAKpB,MAAL,CAAYU,QAAZ,CAAqB,CAAC,QAAD,CAArB;EACD;;AAnG6B;;;QAVvBf,mDAAMA;;QAENC,2DAAeA;;;AAQXE,mBAAmB,sDAL/BJ,wDAAS,CAAC;EACT2B,QAAQ,EAAE,sBADD;EAETC,UAAAA,mEAFS;;AAAA,CAAD,CAKsB,GAAnBxB,mBAAmB,CAAnB","sources":["./src/app/pages/recuperar-contra/recuperar-contra-routing.module.ts","./src/app/pages/recuperar-contra/recuperar-contra.module.ts","./src/app/pages/recuperar-contra/recuperar-contra.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RecuperarContraPage } from './recuperar-contra.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RecuperarContraPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RecuperarContraPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RecuperarContraPageRoutingModule } from './recuperar-contra-routing.module';\n\nimport { RecuperarContraPage } from './recuperar-contra.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RecuperarContraPageRoutingModule\n  ],\n  declarations: [RecuperarContraPage]\n})\nexport class RecuperarContraPageModule {}\n","import { Component, OnInit } from '@angular/core';\n// Las clases Router y NavigationExtras son necesarias para que la página login le pase\n// el nombre de usuario a la página home\nimport { Router, NavigationExtras } from '@angular/router';\n// La clase ToastController sirve para mostrar mensajes emergente que duran un par de segundos\nimport { ToastController } from '@ionic/angular';\nimport { Usuario } from 'src/app/model/Usuario';\n\n@Component({\n  selector: 'app-recuperar-contra',\n  templateUrl: './recuperar-contra.page.html',\n  styleUrls: ['./recuperar-contra.page.scss'],\n})\nexport class RecuperarContraPage implements OnInit {\n  /*\n    Se genera el modelo user con dos claves (key), las que se comportan como propiedades\n    de la clase LoginPage.\n    En Modelo MVC, la clase \"LoginPage\" viene siendo el \"Controlador\", encargado de administrar\n    la parte gráfica de la página web de login, por lo que trabaja coordinado con el\n    archivo login.page.html\n    Cada propiedad tiene su valor inicial y tiene su pareja de control HTML que es el <ion-input>\n    De este modo el TAG:\n    <ion-input type=\"text\" [(ngModel)]=\"login.Usuario\"></ion-input>\n    ya sabe que tiene que trabajar con el modelo de Angular a través de la\n    propiedad \"login.Usuario\".\n    Fijarse que si se le colocan valores iniciales a login.usuario y login.password,\n    estos aparecerán inmediatamente reflejados en la página login cuando esta\n    se abra por primera vez.\n  */\n\n  public usuario: Usuario;\n  /*\n    Para poder trabajar con Router y poder navegar hacia la página \"home\", debemos primero\n    pasar como parámetro e instanciar un objeto de la clase \"Router\". Fijarse que el tipo\n    de dato, que se pasa en el constructor es \"Router\" con mayúscula, porque se trata de\n    una clase y éstas parten con letra mayúscula, mientras que \"router\" con minúscula es\n    el objeto de esa clase, que usaremos para ejecutar el método \"navigate\".\n  */\n  constructor(private router: Router, private toastController: ToastController) {\n    this.usuario = new Usuario('', '', '', '', '');\n    this.usuario.correo = '';\n  }\n\n  public ngOnInit(): void {\n\n    /*\n      Las siguientes 3 líneas de código sirven para lo siguiente:\n        Caso 1: Si las comentas, la página quedará lista para ingresar el nombre de\n          usuario y la password\n        Caso 2: Si dejas las instrucciones sin comentar, entonces entrará inmediatamente\n          a la página home, usando el usuario por defecto \"cgomezvega\" con la\n          password \"123\". Lo anterior es muy útil para el caso en que ya quedó lista\n          la página de login y me interesa probar las otras páginas, de este modo se saltará\n          el login y no tendrás que estar digitando los datos todo el tiempo.\n    */\n    // this.usuario.correo = 'cgomez';\n    // this.usuario.password = '5678';\n    // this.ingresar();\n  }\n\n  public ingresarRecu(): void {\n\n    if(!this.validarUsuarioRecu(this.usuario)) {\n      return;\n    }\n\n    this.mostrarMensaje('¡Bienvenido!') ;\n\n   \n    const navigationExtras: NavigationExtras = {\n      state: {\n        usuario: this.usuario\n      }\n    };\n    // Navegamos hacia el Home y enviamos la información extra\n    this.router.navigate(['/pregunta'], navigationExtras);\n  }\n\n  /*\n    Usaremos validateModel para verificar que se cumplan las\n    validaciones de los campos del formulario\n  */\n  public validarUsuarioRecu(usuario: Usuario): boolean {\n\n    const usu = this.usuario.buscarUsuarioValidoRecu(\n      this.usuario.correo);\n\n    if (usu) {\n      this.usuario = usu;\n      return true;\n    }\n    else {\n      this.mostrarMensaje('Las credenciales no son correctas!');\n      return false;\n    }\n  }\n\n  /**\n   * Muestra un toast al usuario\n   *\n   * @param mensaje Mensaje a presentar al usuario\n   * @param duracion Duración el toast, este es opcional\n   */\n  async mostrarMensaje(mensaje: string, duracion?: number) {\n    const toast = await this.toastController.create({\n        message: mensaje,\n        duration: duracion? duracion: 2000\n      });\n    toast.present();\n  }\n  goToLogin(){\n    this.router.navigate(['/login'])\n  }\n\n}"],"names":["Component","Router","ToastController","Usuario","RecuperarContraPage","constructor","router","toastController","usuario","correo","ngOnInit","ingresarRecu","validarUsuarioRecu","mostrarMensaje","navigationExtras","state","navigate","usu","buscarUsuarioValidoRecu","mensaje","duracion","toast","create","message","duration","present","goToLogin","selector","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}